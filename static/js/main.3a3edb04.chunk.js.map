{"version":3,"sources":["Components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","props","handleTextFieldChange","event","setState","inputText","target","value","onSubmitInputText","todosClone","state","todos","newTask","title","checked","push","toggleChecked","index","clearTask","splice","Typography","variant","color","id","TextField","size","placeholder","type","margin","this","onChange","onKeyPress","key","length","map","todo","className","Grid","container","item","xs","onClick","align","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8XA2HeA,G,wDAnHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,sBAAwB,SAACC,GACvB,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SAXT,EAoBnBC,kBAAoB,WAClB,IAAIC,EAAU,YAAO,EAAKC,MAAMC,OAC5BC,EAAU,CACZC,MAAO,EAAKH,MAAML,UAClBS,SAAS,GAEXL,EAAWM,KAAKH,GAChB,EAAKR,SAAS,CACZO,MAAOF,EACPJ,UAAW,MA7BI,EAiCnBW,cAAgB,SAACC,GACf,IAAIR,EAAU,YAAO,EAAKC,MAAMC,OAChCF,EAAWQ,GAAOH,SAAWL,EAAWQ,GAAOH,QAC/C,EAAKV,SAAS,CACZO,MAAOF,EACPJ,UAAW,MAtCI,EA0CnBa,UAAY,SAACD,GACX,IAAIR,EAAU,YAAO,EAAKC,MAAMC,OAChCF,EAAWU,OAAOF,EAAO,GACzB,EAAKb,SAAS,CACZO,MAAOF,EACPJ,UAAW,MA5Cb,EAAKK,MAAQ,CACXL,UAAW,GACXM,MAAO,IALQ,E,qDAmDT,IAAD,OACP,OACE,6BACE,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,YAAYC,GAAG,SAA9C,SAGA,kBAACC,EAAA,EAAD,CACED,GAAG,aACHF,QAAQ,SACRI,KAAK,SACLC,YAAY,yBACZC,KAAK,OACLC,OAAO,QACPrB,MAAOsB,KAAKnB,MAAML,UAClByB,SAAUD,KAAK3B,sBACf6B,WAAY,SAAC5B,GAAD,MACI,UAAdA,EAAM6B,KAAmB,EAAKxB,uBAGlC,6BAC8B,GAA3BqB,KAAKnB,MAAMC,MAAMsB,OAChBJ,KAAKnB,MAAMC,MAAMuB,KAAI,SAACC,EAAMlB,GAAP,OACnB,yBAAKmB,UAAU,QACb,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACf,GAAIN,GAClB,kBAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACZL,EAAKrB,SACJ,kBAAC,IAAD,CACE2B,QAAS,kBAAM,EAAKzB,cAAcC,MAGrB,GAAhBkB,EAAKrB,SACJ,kBAAC,IAAD,CACE2B,QAAS,kBAAM,EAAKzB,cAAcC,OAIxC,kBAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACf,kBAACH,EAAA,EAAD,CACEE,MAAI,EACJC,GAAI,EACJJ,UAAS,UAAKD,EAAKrB,QAAU,UAAY,KAEzC,kBAACM,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,eAAeoB,MAAM,QACjDP,EAAKtB,QAGV,kBAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACf,kBAACH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAWC,QAAS,kBAAM,EAAKvB,UAAUD,YAMjD,kBAACG,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,eAAeC,GAAG,SAAjD,wC,GA1GWoB,cCKRC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a3edb04.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Typography, TextField, Grid } from \"@material-ui/core\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport \"./ToDoList.css\";\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputText: \"\",\r\n      todos: [],\r\n    };\r\n  }\r\n\r\n  handleTextFieldChange = (event) => {\r\n    this.setState({\r\n      inputText: event.target.value,\r\n    });\r\n\r\n    // if (event.key === \"Enter\") {\r\n    //   console.log(this.state.inputText);\r\n\r\n    // }\r\n  };\r\n\r\n  onSubmitInputText = () => {\r\n    var todosClone = [...this.state.todos];\r\n    var newTask = {\r\n      title: this.state.inputText,\r\n      checked: false,\r\n    };\r\n    todosClone.push(newTask);\r\n    this.setState({\r\n      todos: todosClone,\r\n      inputText: \"\",\r\n    });\r\n  };\r\n\r\n  toggleChecked = (index) => {\r\n    var todosClone = [...this.state.todos];\r\n    todosClone[index].checked = !todosClone[index].checked;\r\n    this.setState({\r\n      todos: todosClone,\r\n      inputText: \"\",\r\n    });\r\n  };\r\n\r\n  clearTask = (index) => {\r\n    var todosClone = [...this.state.todos];\r\n    todosClone.splice(index, 1);\r\n    this.setState({\r\n      todos: todosClone,\r\n      inputText: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Typography variant=\"h1\" color=\"secondary\" id=\"title\">\r\n          todos\r\n        </Typography>\r\n        <TextField\r\n          id=\"main-input\"\r\n          variant=\"filled\"\r\n          size=\"medium\"\r\n          placeholder=\"What needs to be done?\"\r\n          type=\"text\"\r\n          margin=\"dense\"\r\n          value={this.state.inputText}\r\n          onChange={this.handleTextFieldChange}\r\n          onKeyPress={(event) =>\r\n            event.key === \"Enter\" && this.onSubmitInputText()\r\n          }\r\n        />\r\n        <div>\r\n          {this.state.todos.length != 0 ? (\r\n            this.state.todos.map((todo, index) => (\r\n              <div className=\"task\">\r\n                <Grid container id={index}>\r\n                  <Grid item xs={1}>\r\n                    {todo.checked && (\r\n                      <CheckCircleIcon\r\n                        onClick={() => this.toggleChecked(index)}\r\n                      />\r\n                    )}\r\n                    {todo.checked == false && (\r\n                      <RadioButtonUncheckedIcon\r\n                        onClick={() => this.toggleChecked(index)}\r\n                      />\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={1}></Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={8}\r\n                    className={`${todo.checked ? \"checked\" : \"\"}`}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"text-primary\" align=\"left\">\r\n                      {todo.title}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={1}></Grid>\r\n                  <Grid item xs={1}>\r\n                    <ClearIcon onClick={() => this.clearTask(index)} />\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" color=\"text-primary\" id=\"catch\">\r\n              Your tasks will be shown here.\r\n            </Typography>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ToDoList from \"./Components/ToDoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}